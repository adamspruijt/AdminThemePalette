<?php

class AdminThemePalette extends AdminTheme implements Module, ConfigurableModule {

	public static function getModuleInfo() {
		return array(
			'title' => 'Palette: Admin Theme',
			'version' => 004,
			'summary' => 'Beautiful, simple, sensible, customizable admin theme.',
			'autoload' => 'template=admin'
			); 
	}





	public static function getModuleConfigInputfields(array $data) {

		$modules = wire('modules');
		$modules->addHookBefore('saveModuleConfigData', null, 'compileThemeLess'); 

		// add color picker scripts / styles
		wire('config')->scripts->append(wire('config')->urls->get( wire('adminTheme')->className() )."scripts/jquery.minicolors.min.js");
		wire('config')->styles->append(wire('config')->urls->get( wire('adminTheme')->className() )."scripts/jquery.minicolors.css");


		$inputfields = new InputfieldWrapper();


		// disable page dots feature
		$field = wire('modules')->get('InputfieldCheckbox');
		$field->label = "Disable Page Status Dots";
		$field->attr('name', 'disable_dots');
		if ($data['disable_dots']) $field->attr('checked', 'checked'); 
		$field->set('columnWidth', 33);
		$inputfields->add($field); 		


		// dropdown menu level
		$field = wire('modules')->get('InputfieldSelect');
		$field->label = "Dropdown menu depth";
		$field->attr('name', 'dropdown_depth');
		$field->attr('value', !is_null($data['dropdown_depth']) ? $data['dropdown_depth'] : 1); 
		// $selected = !is_null($data['dropdown_depth']) ? $data['dropdown_depth'] : 1; // default to one level dropdown
		$selected = $data['dropdown_depth']; // default to one level dropdown
		$field->addOption(0, __("None (disable dropdown menus)"), $selected == 0 ? array("selected"=>"selected") : null);
		$field->addOption(1, __("One"), $selected == 1 ? array("selected"=>"selected") : null);
		$field->addOption(2, __("Two"), $selected == 2 ? array("selected"=>"selected") : null);
		$field->set('columnWidth', 34);
		$inputfields->add($field); 		

		// disable gravatar
		$field = wire('modules')->get('InputfieldCheckbox');
		$field->label = __("Disable Gravatar");
		$field->attr('name', 'disable_gravatar');
		if ($data['disable_gravatar']) $field->attr('checked', 'checked'); 
		$field->set('columnWidth', 33);
		$inputfields->add($field); 	


		// theme color selection
		// main
		$field = wire('modules')->get('InputfieldText');
		$field->label = __("Main Color");
		$field->notes = __("Primarily applied to the background.");
		$field->attr('name', 'theme_color_main');
		$field->attr('value', isset($data['theme_color_main']) ? $data['theme_color_main'] : ""); 
		$field->set('columnWidth', 25);
		$inputfields->add($field); 		

		// accent
		$field = wire('modules')->get('InputfieldText');
		$field->label = __("Accent Color");
		$field->notes = __("Used in highlightinf active items and other suble elements.");
		$field->attr('name', 'theme_color_accent');
		$field->attr('value', isset($data['theme_color_accent']) ? $data['theme_color_accent'] : ""); 
		$field->set('columnWidth', 25);
		$inputfields->add($field); 	

		// button color
		$field = wire('modules')->get('InputfieldText');
		$field->label = __("Button Color");
		$field->notes = __("Default button color");
		$field->attr('name', 'theme_color_button');
		$field->attr('value', isset($data['theme_color_button']) ? $data['theme_color_button'] : ""); 
		$field->set('columnWidth', 25);
		$inputfields->add($field); 		

		// link color
		$field = wire('modules')->get('InputfieldText');
		$field->label = __("Link Color");
		$field->notes = __("Hover color will use a darkened variation of this color");
		$field->attr('name', 'theme_color_link');
		$field->attr('value', isset($data['theme_color_link']) ? $data['theme_color_link'] : ""); 
		$field->set('columnWidth', 25);
		$inputfields->add($field); 		




		// css override field (define custom css for easy small tweaks)
		$field = wire('modules')->get('InputfieldTextarea');
		$field->label = __("Custom CSS (define custom css for easy small tweaks)");
		$field->attr('name', 'custom_css');
		$field->attr('value', isset($data['custom_css']) ? $data['custom_css'] : ''); 
		$field->set('columnWidth', 100);
		$inputfields->add($field); 		

		return $inputfields;
	}

	public function ___install() {
		$config = array(
			'dropdown_depth' => 1
		);
		$this->modules->saveModuleConfigData($this, $config);
	}

}

// hook getModuleConfigInputfields: thanks Pete! 
// (http://processwire.com/talk/topic/1849-clearing-cache-on-module-save/)
function compileThemeLess(HookEvent $event) {
	// get and init lessPHP
	require "includes/lessphp/lessc.inc.php";
	$less = new lessc;
	$less->setFormatter("compressed");

	// use input because values arent yet saved
	$main_color = wire("input")->post->theme_color_main ? wire("input")->post->theme_color_main : "#444";
	$accent_color = wire("input")->post->theme_color_accent ? wire("input")->post->theme_color_accent : "#e0814a";


	
	$less->setVariables(array(
	  "bg" => $main_color,
	  "accent" => $accent_color
	));
	$theme_css = $less->compileFile(wire("config")->paths->AdminThemePalette."styles/main.less", wire("config")->paths->AdminThemePalette."styles/main.css");
	wire()->message('Palette: main.css - compiled successfully');
	



}